# Service Account
> vi new-doc.yaml
> kubectl apply -f new-doc.yaml 
    apiVersion: v1
    kind: ServiceAccount
    metadata:
         name: sa-16

# Token
> vi token.yaml
> kubectl apply -f token.yaml
    apiVersion: v1
    kind: Secret
    metadata:
        name: sa-16-token
        annotations:
           kubernetes.io/service-account.name: sa-16
    type: kubernetes.io/service-account-token

# Role
> vi role.yaml
> kubectl apply -f role.yaml
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
       name: role-16
       namespace: default
    rules:
     - apiGroups: [""]
       resources: ["pods","services"]
       verbs: ["get","create"]

# Role-binding
> vi role-binding.yaml
> kubectl apply -f role-binding.yaml
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
          name: rolebinding-16
      subjects:
      - kind: ServiceAccount
        name: sa-16
      roleRef:
       kind: Role
       name: role-16
       apiGroup: rbac.authorization.k8s.io

# Cluster-role
> vi cluster-role.yaml
> kubectl apply -f cluster-role.yaml 
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: secret-reader
      rules:
      - apiGroups: [""]
        resources: ["secrets"]
        verbs: ["get", "watch", "list"]

> kubectl describe sa sa-16
Name:                sa-16
Namespace:           default
Labels:              <none>
Annotations:         <none>
Image pull secrets:  <none>
Mountable secrets:   <none>
Tokens:              sa-16-token
Events:              <none>

> kubectl auth can-i create pods --as=system:serviceaccount:default:sa-16
yes
> kubectl auth can-i get pods --as=system:serviceaccount:default:sa-16
yes
> kubectl auth can-i delete pods --as=system:serviceaccount:default:sa-16
no

